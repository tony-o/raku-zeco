use Test;

use lib 'xt/lib';
use TestRender;
use TestUtil;
use Zeco::DB;
use Zeco::Query::Users;
use Zeco::Util::Types;
use Zeco::Util::Json;
use Zeco::Exceptions;

plan 15;

cleanup;

my $test-render = TestRender.new;
my $user-q = QRegister.new(:email(email), :username<tonyo-test>, :password<password>);

# sign up
register($user-q).render($test-render);
$test-render.assert(200, {:success});

# try an invalid key
$user-q = QPasswordReset.new(:auth<tonyo-test>, :password<password>, :key<xyz>);
password-reset($user-q).render($test-render);
$test-render.assert(404, {:!success, :message('Not found.')});

# initialize a request
$user-q = QInitPasswordReset.new(:auth<tonyo-test>);
init-password-reset($user-q).render($test-render);
$test-render.assert(200, {:success});

my $key = '';
my $res = db().query('select count(*) c from password_reset where user_id in (select user_id from users where email = $1)', email).hash;
ok $res<c> == 1, 'should only be one password reset';
$res = db().query('select key from password_reset').hash;
$key = $res<key>;

# try an invalid key
$user-q = QPasswordReset.new(:auth<tonyo-test>, :password<password>, :key<xyz>);
password-reset($user-q).render($test-render);
$test-render.assert(404, {:!success, :message('Not found.')});

# try an expired key
db.query('update password_reset set expires = -1 where user_id in (select user_id from users where email = $1)', email);
$user-q = QPasswordReset.new(:auth<tonyo-test>, :password<password>, :$key);
password-reset($user-q).render($test-render);
$test-render.assert(404, {:!success, :message('Reset key has expired, please reinitiate the password reset and try again')});


# try an invalid password
db.query('update password_reset set expires = 99999999999999999 where user_id in (select user_id from users where email = $1)', email);
$user-q = QPasswordReset.new(:auth<tonyo-test>, :password<pass>, :$key);
password-reset($user-q).render($test-render);
$test-render.assert(400, {:!success, :message(InvalidPassword.new.message)});

# finally make sure it works
$user-q = QPasswordReset.new(:auth<tonyo-test>, :password<password>, :$key);
password-reset($user-q).render($test-render);
$res = db().query('select authkey from keys where user_id in (select user_id from users where email = $1) order by expires desc limit 1', email).hash;
$key = $res<authkey>;
$test-render.assert(200, {:success});
