use Test;

use lib 'xt/lib';
use TestRender;
use TestUtil;
use Zeco::DB;
use Zeco::Query::Dists;
use Zeco::Query::Groups;
use Zeco::Query::Users;
use Zeco::Util::Types;
use Zeco::Util::Json;
use Zeco::Responses;


cleanup('org@org.com');
my $test-render = TestRender.new;
register(QRegister.new(:email(email), :username<tonyo-test>, :password<password>)).render($test-render);
$test-render.assert(200, {:success});

my $user = {:username<tonyo-test>};
my $upload-user = {:username<tony-o>};

generate-full-meta().render($test-render);
$test-render.assert(200, []);

remove-dist(QRemoveDist.new(:dist<xyz>), $user).render($test-render);
$test-render.assert(404, {:!success, :message('Not found.')});

my $dist = 'xt/data/sample.tar.gz'.IO.slurp(:bin);

# auth mismatch
ingest-upload(QIngestUpload.new(:$dist), $user).render($test-render);
$test-render.assert(403, {:!success, :message("Invalid auth. User<fez:tonyo-test> is not a member of fez:tony-o")});

# successful upload by another user
ingest-upload(QIngestUpload.new(:$dist), $upload-user).render($test-render);
$test-render.assert(200, {:success});

generate-full-meta().render($test-render);
$test-render.assert(200, [{:api(""), :auth("fez:tony-o"), :dist("Green:ver<0.1.3>:auth<fez:tony-o>"), :name("Green"), :path("G/RE/fcc4cdd231e20e087c76f23090231afded49fed3.tar.gz"), :provides(${:Green("lib/Green.pm6")}), :version("0.1.3")}, ]);

# our user cannot delete another user's dist
remove-dist(QRemoveDist.new(:dist("Green:ver<0.1.3>:auth<fez:tony-o>")), $user).render($test-render);
$test-render.assert(403, {:!success, :message("Invalid auth. User<fez:tonyo-test> is not a member of fez:tony-o")});

# can delete our own
remove-dist(QRemoveDist.new(:dist("Green:ver<0.1.3>:auth<fez:tony-o>")), $upload-user).render($test-render);
$test-render.assert(200, {:success});

generate-full-meta().render($test-render);
$test-render.assert(200, []);

# can upload/remove from group
create-group(QCreateGroup.new(:email(grup), :group<tony-o>), user-id).render($test-render);
$test-render.assert(200, {:success});

ingest-upload(QIngestUpload.new(:$dist), $user).render($test-render);
$test-render.assert(200, {:success});

generate-full-meta().render($test-render);
$test-render.assert(200, [{:api(""), :auth("fez:tony-o"), :dist("Green:ver<0.1.3>:auth<fez:tony-o>"), :name("Green"), :path("G/RE/fcc4cdd231e20e087c76f23090231afded49fed3.tar.gz"), :provides(${:Green("lib/Green.pm6")}), :version("0.1.3")}, ]);

remove-dist(QRemoveDist.new(:dist("Green:ver<0.1.3>:auth<fez:tony-o>")), $upload-user).render($test-render);
$test-render.assert(200, {:success});

generate-full-meta().render($test-render);
$test-render.assert(200, []);

# other errors
ingest-upload(QIngestUpload.new(:dist(Buf.new)), $user).render($test-render);
$test-render.assert(422, {:!success, message => "Error extracting archive:\ntar: This does not look like a tar archive\n\ngzip: stdin: unexpected end of file\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n"});

ingest-upload(QIngestUpload.new(:dist('xt/data/bad-meta.tar.gz'.IO.slurp(:bin))), $user).render($test-render);
$test-render.assert(422, {:!success, message => "Unable to parse META6.json"});
